//
// Script converts published contract binaries to the form which can be used by
// abigen to generate golang Ethereum contract stubs. Abigen gets input from
// the Stdin in case when ```--abi -``` is passed. Data format is combined JSON
// generated by ```solc``` solidity compiler. 
//
// See: https://github.com/ethereum/go-ethereum/blob/4466c7b971837bded610dd2225ddc6065c0cb3c3/cmd/abigen/main.go#L164
// See: https://github.com/ethereum/go-ethereum/blob/4466c7b971837bded610dd2225ddc6065c0cb3c3/common/compiler/solidity.go#L164
//

// parse command line
const optionDefinitions = [
  { name: 'contract-package', type: String },
  { name: 'contract-name', type: String },
  { name: 'go-package', type: String },
  { name: 'output-file', type: String }
];
let commandLineArgs = require('command-line-args');
let options = commandLineArgs(optionDefinitions, {camelCase: true});

let contractPackage = options.contractPackage
let contractName = options.contractName

// load contract from package
const bytecode = require(contractPackage + '/bytecode/'
    + contractName + '.json');
const abi = require(contractPackage + '/abi/'
    + contractName + '.json');

// convert to solc combined JSON format
let contracts = {};
contracts[contractName + '.sol:' + contractName] = {
    abi: JSON.stringify(abi),
    bin: bytecode.substr(2),
    userdoc: '{"methods":{}}',
    devdoc: '{"methods":{}}'
};
let combined = {
    contracts: contracts
};

// call abigen with generated combined JSON
let execFile = require('child_process').execFile;
let stream   = require('stream');
let child = execFile('abigen',
    ['-abi', '-', '-pkg', options.goPackage, '-out', options.outputFile],
    function (err, stdout, stderr) {
        if (err) {
            console.log(err);
        }
        if (stdout !== '') {
            console.log(stdout);
        }
        if (stderr !== '') {
            console.log(stderr);
        }
    });
let stdinStream = new stream.Readable();
stdinStream.push(JSON.stringify(combined));
stdinStream.push(null);   // Signals the end of the stream (EOF)
stdinStream.pipe(child.stdin);

